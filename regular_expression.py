#正则表达式是用来匹配字符串的强有力的武器
#判断一个字符串是否是合法的Email的方法是：1、创建一个匹配Email的正则表达式；2、用该正则表达式去匹配用户的输入来判断是否合法

#限定符：‘？’：abc?:表示c可以没有也可以有
        #‘*’：abc*:表示c可以没有，也可以出现多次
        #‘+’：ab+c:表示c出现一次或多次
        #‘{}’：ab{2,5}c:表示b出现2到5次，ab{2,}c:表示b出现2次及以上
        #（ab）+c:表示ab出现一次或者多次

#或运算符：a (dog|cat)

#字符类：匹配abc三个字母构成的字符——[abc]+
#       指定字符范围，如[a-z]+:表示a到z所有小写字母
#                      [a-zA-Z]+:表示所有英文字母即a-z的小写字母和A-Z的所有大写字母
#                       [^a-zA-Z0-9]+:表示列出除了^以后内容的字符

#元字符：   \d:表示数字字符
#           \w:表示单词字符（英文、数字及下划线）
#           \s:表示空白符（包括Tab和换行符）
#           \D:表示非数字字符
#           \W:表示非单词字符
#           \S:表示非空白符字符
#            .:代表任意字符但不包含换行符
#           ^:表示只会匹配行首，例如^a,这个只会匹配出现在行首的a
#           $:表示只会匹配行尾。例如a$,这个只会匹配出现在行尾的a
#           ？：表示非贪婪匹配
#           \：也代表转义字符

#re模块————————————————————————————————————————————————————————————————————————————————————
s='ABC\\-001'
s=r'ABC\-001'  #这两个表达的内容是一样的，建议用r''的，这样就不用转义符\
import re
print(re.match(r'^\d{3}-\d{3,8}$','010-12345'))
test='用户输入的字符串'
if re.match(r'正则表达式',test):
    print('ok')
else:
    print('fail')

#切分字符串——————————————————————————————————————————————————————————————————————————————————————————————————
print('a  b   c'.split(' '))#无法识别连续的空格
print(re.split(r'\s+','a  b    c'))
print(re.split(r'[\s\,\;]+','a, c,w,c v;  b   ; c'))#里面的\,(\;)表示的应该是，(;)

#分组————————————————————————————————————————————————————————————————————————————————————————
#除了简单的判断是否匹配之外，正则表达式还有提取子串的功能。用（）表示的就是要提取的分组
m=re.match(r'^(\d{3})-(\d{3,8})-(\d{1,4})$','012-2385-094')
print(m,'\n',m.group(0),'\n',m.group(2),'\n',m.group(1))    #group(0)为字符串本身，groups()输出所有分组

#贪婪匹配——————————————————————————————————————————————————————————————————————————————————————————————
#正则匹配默认是贪婪匹配，就是尽可能多的匹配字符
print(re.match(r'^(\d+)(0*)$','121300').groups())   #由于\d+采取的是贪婪匹配，直接把后面的00给全部匹配，结果0*只能匹配空格
#非贪婪匹配（也就是尽可能的少匹配）：
print(re.match(r'^(\d+?)(0*)$','123000').groups())

#编译————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#出于效率考虑，我们可以 预编译 该正则表达式，使用时就不用编译这个步骤

#预编译：
re_telephone=re.compile(r'^(\d{3})-(\d{3,8})')
print(re_telephone.match('123-390935').groups())